<div class="text-center pt-3" style="height: 55vh"><h1><em>Psst: have a look at the JavaScript Console</em> üíÅ</h1></div>
<script>
  const inventors = [
    { first: 'Albert', last: 'Einstein', year: 1879, passed: 1955 },
    { first: 'Isaac', last: 'Newton', year: 1643, passed: 1727 },
    { first: 'Galileo', last: 'Galilei', year: 1564, passed: 1642 },
    { first: 'Marie', last: 'Curie', year: 1867, passed: 1934 },
    { first: 'Johannes', last: 'Kepler', year: 1571, passed: 1630 },
    { first: 'Nicolaus', last: 'Copernicus', year: 1473, passed: 1543 },
    { first: 'Max', last: 'Planck', year: 1858, passed: 1947 },
    { first: 'Katherine', last: 'Blodgett', year: 1898, passed: 1979 },
    { first: 'Ada', last: 'Lovelace', year: 1815, passed: 1852 },
    { first: 'Sarah E.', last: 'Goode', year: 1855, passed: 1905 },
    { first: 'Lise', last: 'Meitner', year: 1878, passed: 1968 },
    { first: 'Hanna', last: 'Hammarstr√∂m', year: 1829, passed: 1909 }
  ];

  const people = ['Beck, Glenn', 'Becker, Carl', 'Beckett, Samuel', 'Beddoes, Mick', 'Beecher, Henry', 'Beethoven, Ludwig', 'Begin, Menachem', 'Belloc, Hilaire', 'Bellow, Saul', 'Benchley, Robert', 'Benenson, Peter', 'Ben-Gurion, David', 'Benjamin, Walter', 'Benn, Tony', 'Bennington, Chester', 'Benson, Leana', 'Bent, Silas', 'Bentsen, Lloyd', 'Berger, Ric', 'Bergman, Ingmar', 'Berio, Luciano', 'Berle, Milton', 'Berlin, Irving', 'Berne, Eric', 'Bernhard, Sandra', 'Berra, Yogi', 'Berry, Halle', 'Berry, Wendell', 'Bethea, Erin', 'Bevan, Aneurin', 'Bevel, Ken', 'Biden, Joseph', 'Bierce, Ambrose', 'Biko, Steve', 'Billings, Josh', 'Biondo, Frank', 'Birrell, Augustine', 'Black, Elk', 'Blair, Robert', 'Blair, Tony', 'Blake, William'];

  // Array.prototype.filter()
  // finding everyone who was born in the 1500's
  const fifteen = inventors.filter(function(inventor) {
    if(inventor.year >= 1500 && inventor.year < 1600) {
      return true;
    }
  });
  console.table(fifteen);
  // refactured version
  const fifteen_hundreds = inventors.filter(inventor => (inventor.year >= 1500 && inventor.year < 1600));
  console.table(fifteen_hundreds);

  // Array.prototype.map()
  // 2. Give us an array of the inventors' first and last names

  // first name
  const first_names = inventors.map(inventor => (inventor.first));
  console.log(first_names);

  // last name
  const last_names = inventors.map(inventor => (inventor.last));
  console.log(last_names);

  // full name
  const full_names = inventors.map(inventor => (`${inventor.first} ${inventor.last}`));
  console.log(full_names);

  // Array.prototype.sort()
  // 3. Sort the inventors by birthdate, oldest to youngest

  const age = inventors.sort(function(a, b) {
    if(a.year > b.year) {
      return 1;
    } else {
      return -1;
    }
  });
  console.table(age);

  // refactured
  const ordered = inventors.sort((a, b) => a.year > b.year ? 1 : -1);
  console.table(ordered);

  // Array.prototype.reduce()
  // 4. How many years did all the inventors live?
  const totalYears = inventors.reduce((total, inventor) => {
    return total + (inventor.passed - inventor.year)
  }, 0); // you have to add the 0 here as the first time going through, total value is undefined - if you don't understand, remove the 0 and see the console log

  console.log(totalYears);

  // 5. Sort the inventors by years lived

  const oldest = inventors.sort((a, b) => {
    const lastGuy = a.passed - a.year;
    const nextGuy = b.passed - b.year;
    return lastGuy > nextGuy ? -1 : 1;
  });

  console.log(oldest);

  // 6. create a list of Boulevards in Paris that contain 'de' anywhere in the name
  // https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris

  // has to be commented out or breaks rest of script - use on console on url to see it working

  // go to url
  // const category = document.querySelector('.mw-category');
  // // change from node list to an array as node list returns not a function
  // const links = Array.from(category.querySelectorAll('a'));

  // const de = links
  //             .map(link => link.textContent)
  //             .filter(streetName => streetName.includes('de'));

  // 7. sort Exercise
  // Sort the people alphabetically by last name

  const alpha = people.sort((lastOne, nextOne) => {
    const [alast, afirst] = lastOne.split(', ');
    const [blast, bfirst] = lastOne.split(', ');
    return alast > blast ? 1 : -1;
  });

  console.log(alpha)
  // 8. Reduce Exercise
  // Sum up the instances of each of these
  const data = ['car', 'car', 'truck', 'truck', 'bike', 'walk', 'car', 'van', 'bike', 'walk', 'car', 'van', 'car', 'truck' ];

  const transportation = data.reduce(function(obj, item) {
    if(!obj[item]) {
      obj[item] = 0;
    }
    obj[item]++;
    return obj;
  }, {}); // {} at the end of this function is an empty objection, so we do not have to declare car = 0, truck = 0 etc. The if statement creates the obj item if there isn't one already
  console.log(transportation);
</script>
